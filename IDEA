
### after thinking it through i think it's really TRIVIAL POS ;-(

# "atomic" event
AEVENT: cdata

# event proper made of parts
EVENT: AEVENT*

"tables" see db_tables

0. name: (key) (value) {notes}
1. event: (EID) (EVENT) {no inverse, EID aka eventcount - evergrowing}
2. head: (HID) (AEVENT) {inversible, HID? , meta events are "singular" i.e. get(AEVENT) = get(HID), first "mention" stores full cdata} perhaps root: would be a better name
3. atomic: (AID) (HID EID) {no inverse... previous?...EID?} perhaps "leave:" would be a better name
4. tail: (TID) (latest AID ) {no, , , last "mention" TID=HID?} perhaps top: would be a better name
5. meta: (MID) ( ) {inversible, with a "tag"...} meta meaning it's defined by EVENT (e.g. meta "todo" = EVENT todo someone project part
6. info: (property) (somevalue) {eventcount, version?, leavescount?...}

ANYWAYZ: several important points...

a. event: contains EVENTSs (aka lines of snippets) encoded with their AIDs (WHICH ones...?) previous...!?!?!1!!?!!?!
b. head: (aka root:) encodes cdata of an AEVENT and its first AID (and so also first EID...)
c. atomic: (aka leave:) indexes all appearances of AEVENTS (with their root and current EID
d. tail: (aka top:) tracks last AID of a HID...
e. meta: are "compoud" AEVENTS which are defined by an EVENT and surrounding them there other "simple" or "compund" AEVENTS, but they are recognizable as such by the fact that "inversion" on root is an identity i.e. key = get(key) and so they need their own "Table" but are defined by context in the atomic: (aka leave:) BUT otherwise they are trated just like simple AEVENTS...

f. we want to achieve "threading" i.e. linked list from head: through atomic: to tail: so we can:
 - quickly decode any event into concrete aevent's cdata
 - quickly move back and forth in history
 - quickly locate all mentions of any aevent
 - quickly jump between different encodings of meta aevents depending on current context of the commandline e.g. if we are "holding" i.e. working on a meta tag of 'EVENT = "TODO" "something"' and we've created snippets containing "something"...

WOW... and two days ago it made perfect sense ;-}

Well, it still does, but I'm slightly foggy due to spending a day on completely foreign concerns of coding this shit in C...

---

NOTES of INITIAL IDEA:

0. table: R1 D1
R as in refernce, D as in data (since both R1 and D1 are unique we can here hold also inverse of D1 R1
aka atoms of "godelized" or otherwise compressed/encoded unreducible symbols/strings/axioms/axis
i.e. set of unique references
i'm not sure if there is any other better way than to simply monotonically number ever new occurence since those refernces need to
be stable and world of entities is open and completely arbitrary (it may be any "blob" of data, but for IFS sake we keep thinking of "whitespaced" words) perhaps strictness can be lessened and better/smarter/optimer way may be found if occasional full space re-referncing turns out to be cheap.

1. table R2 R1 (MR?)
index of every occurence of a given D(ata) to MR - refernce to meta? event aka event as it is described above.
crux of the matter of course is in impossibility of inversion without creation of "buckets" for ever AXIS...

2. table MR R2^N
i.e. "event"ual vectors of a(tomic)events from 1. table (spaceF)

some "golden"/"bright" thoughts:
refernce is compression of empty meaning
occurence of a concept (aka ametaevent) not in the space of the concept BUT in the space of concepts (uhm?)
=> therefore there exists subspace of concept occurences...
but of course since 2. table can be thought of as set of vectors on the versors of axis from 0. table (every non-occurence of aevent in a given event is marked with zero). problem of course is in the dimension of space, it's internal mutability of creating new axis with definitial events and exernal mutability of adding new axis.
not to mention of a problem of holding stability of refernces...

inversion of the metaconcept on the axel (0. table) of inversion (it's all basically about changes of bases between different vector spaces... ) leads (must lead) to identity (in order to prevent infinite regress...
concepts indexed by their "point" in space

aevents are STOP
maevents (meta) are DE-"TREES" (of context)

I/O & 3 registers + CTX...

---

but although going "somewheres" it all sucked becaused it lacked "quickly"-ness mentioned in point f.

